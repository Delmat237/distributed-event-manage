package com.tp3.singleton;
import com.tp3.exceptions.EvenementDejaExistantException;
import com.tp3.model.Evenement;
import com.tp3.persistence.JsonSerializer;
import com.tp3.persistence.XmlSerializer;

import javax.xml.bind.JAXBException;
import java.io.IOException;
import java.util.*;
import java.util.logging.Logger;



public class GestionEvenements {

    // Instance unique (singleton)
    private static GestionEvenements instance;

    // Stockage des √©v√©nements en m√©moire (cache)
    private Map<String, Evenement> evenements = new HashMap<>();

    // Logger pour journalisation
    private final Logger LOGGER = Logger.getLogger(GestionEvenements.class.getName());

    // Constructeur priv√© pour emp√™cher l‚Äôinstanciation directe (pattern Singleton)
    private GestionEvenements() {
        try {
            // Chargement des √©v√©nements depuis le fichier JSON au d√©marrage
            Map<String, Evenement> loaded = JsonSerializer.loadEvenementFromJson(this, "evenements.json");
            if (loaded != null) {
                this.evenements = loaded;
            }
        } catch (IOException e) {
            LOGGER.warning("‚ö†Ô∏è Aucune donn√©e JSON charg√©e au d√©marrage : " + e.getMessage());
        }
    }

    // M√©thode statique pour obtenir l‚Äôinstance unique de la classe
    public static GestionEvenements getInstance() {
        if (instance == null) {
            instance = new GestionEvenements();
        }
        return instance;
    }

    /**
     * Ajoute un √©v√©nement dans la liste.
     * @param event L‚Äô√©v√©nement √† ajouter
     * @throws EvenementDejaExistantException si un √©v√©nement avec le m√™me ID existe d√©j√†
     */
    public void ajouterEvenement(Evenement event) throws EvenementDejaExistantException {
        // V√©rifie si un √©v√©nement avec cet ID existe d√©j√†
        if (evenements.containsKey(event.getId())) {
            throw new EvenementDejaExistantException("‚ö†Ô∏è √âv√©nement d√©j√† existant avec l'ID : " + event.getId());
        }

        // Ajoute l‚Äô√©v√©nement √† la map
        evenements.put(event.getId(), event);
        LOGGER.info("‚úÖ AJOUT : " + event.getNom());

        // Sauvegarde dans les fichiers JSON et XML
        sauvegarder();
    }

    /**
     * Supprime un √©v√©nement par son ID.
     * @param id L'identifiant de l‚Äô√©v√©nement
     * @throws IOException si une erreur survient lors de la sauvegarde
     */
    public void supprimerEvenement(String id) throws IOException {
        Evenement event = evenements.get(id);

        if (event != null) {
            evenements.remove(id);
            LOGGER.info("üóëÔ∏è SUPPRIM√â : " + event.getNom());
            sauvegarder();
        } else {
            LOGGER.warning("‚ö†Ô∏è Aucun √©v√©nement trouv√© avec ID : " + id);
        }
    }

    /**
     * Recherche un √©v√©nement par son ID.
     * @param id L‚Äôidentifiant de l‚Äô√©v√©nement
     * @return Un Optional contenant l‚Äô√©v√©nement s‚Äôil est trouv√©, sinon vide
     */
    public Optional<Evenement> rechercherEvenement(String id) {
        Evenement event = evenements.get(id);
        if (event != null) {
            LOGGER.info("üîç √âv√©nement trouv√© : " + event.getNom());
        } else {
            LOGGER.warning("‚ùå Aucun √©v√©nement trouv√© avec ID : " + id);
        }
        return Optional.ofNullable(event);
    }

    /**
     * Renvoie tous les √©v√©nements actuellement charg√©s en m√©moire.
     * @return Une Map des √©v√©nements
     */
    public Map<String, Evenement> getEvenements() {
        return evenements;
    }

    /**
     * Permet de red√©finir compl√®tement la liste des √©v√©nements.
     * @param evenements La nouvelle map d‚Äô√©v√©nements
     */
    public void setEvenements(Map<String, Evenement> evenements) {
        this.evenements = evenements;
    }

    /**
     * Sauvegarde les √©v√©nements en JSON et en XML.
     * Appel√©e apr√®s chaque modification (ajout ou suppression).
     */
    private void sauvegarder() {
        try {
            // Sauvegarde en JSON
            JsonSerializer.saveEvenementToJson(this, "evenements.json");

            // Sauvegarde en XML
            XmlSerializer.saveEvenementsToXml(new ArrayList<>(evenements.values()), "evenements.xml");

            LOGGER.info("‚úÖ Donn√©es sauvegard√©es en JSON et XML.");
        } catch (IOException | JAXBException e) {
            LOGGER.severe("‚ùå Erreur de sauvegarde : " + e.getMessage());
        }
    }
}
